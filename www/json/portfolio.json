[{"name":"goodmorningyt","type":"portfolio","title":"Good Morning YouTube","subtitle":"Daily Playlist Generator","link":"http://dooley.ac.nz/goodmorningyt","image":"img/yt.png","btnText":"Visit","category":"Tools","text":"Good Morning YouTube is a personal project to simplify something that I find myself doing every day. There are a few 'YouTubers' whose videos I watch on a daily basis, and while YouTube's subscription feature is great, it isn't always the quickest way to find those few subscriptions that I watch daily, and I have to manually change video after each one ends. So by combining the YouTube Data API with the YouTube iFrame Embed API, I built an application that allows a user to connect with their YouTube account and build a small list (or 'Morning') of subscribers that they can generate a playlist of videos for from a certain date. These videos are then loaded into the embedded player to play one after another. Built from a combination of NodeJS with Express and Passport on the back-end and AngularJS + Material Design Bootstrap on the front.","selected":false},{"name":"cbgame","type":"portfolio","title":"Castle Breakout","subtitle":"Ver 1.0","link":"cbgame/","image":"img/cbgame.jpg","btnText":"Visit","category":"Games","text":"Castle Breakout is a Brick Breaking game with a simple cartoony aesthetic, created more as a project to try out Phaser than as a serious game. Phaser, a JavaScript game engine, is the core of this project. The player bounces the ball off a paddle controlled by the mouse to attempt to hit various blocks at the top of the screen. These blocks have different behaviours ranging from stone blocks that require two hits, to explosive crates that destroy other blocks around them. The scoring system has players catching coins that drop from destroyed blocks while still anticipating the bounce of the ball. Full attribution is available on the game page.","selected":false},{"name":"dictionary","type":"portfolio","title":"Dictionary","subtitle":"A Knowledge Game","link":"dictionary/","image":"img/dict.png","btnText":"Visit","category":"Games","text":"Dictionary is a simple game where the player has to attempt to guess a word given a selection of letters and the the word's definition. Words were gathered from a list of the 2000 most common English words and definitions were then gathered from the 'Words' API on Mashape. This was developed as an experiment with Node.js to create a back end that can serve a JSON file for a random word + definition or the definition of a supplied word. The API can be accessed from  http://dooley.ac.nz:3001/dict, http://dooley.ac.nz:3001/dict/random or http://dooley.ac.nz:3001/define/[word]."},{"name":"maze","type":"portfolio","title":"Maze Generator","subtitle":"A WIP toy","link":"maze/","image":"img/maze.png","btnText":"Visit","category":"Toys","text":"The maze generator is currently a work in progress. The end goal is to implement multiple maze generation algorithms and possible customizations for those algorithms. Also planned is the ability for user to attempt to solve mazes that they generate. Currently only a single algorithm is implemented and mazes are limited to 100x100 because of limited stack size in JS. The app is coded in JS and uses Phaser to display the graph, though currently overkill, the use of Phaser is in anticipation of adding the ability for users to interact with the maze."},{"name":"life","type":"portfolio","title":"Conway's Life","subtitle":"Implementation","link":"life/","image":"img/life.png","btnText":"Visit","category":"Toys","text":"This is a simple implementation of the rules for Conway's game of life. Currently low on features and it doesn't support varied grid sizes or stepping back generations (now implemented). Plans are to implement these as well as alternative algorithms, switching between toroidal bounds (currently implemented) and hard bounds, and a graphical upgrade.","selected":false},{"name":"terrain","type":"portfolio","title":"TerrainGenerator","subtitle":"A Random Terrain Generator in Java","link":"https://github.com/danieldooley/TerrainGenerator","image":"img/terrain.png","btnText":"GitHub","category":"Toys","text":"A project to attempt generating random terrain in Java. The program starts by generating terrain a specified shapes (defining how the ocean generates around the landmass). It then generates lakes, rivers and beaches on top of this. The terrain falls on a scale of temperature; Desert -> Savannah -> Plains -> Forest -> Jungle. To make the project accessible it was hooked up to a NodeJS script that allows it to be ran remotely and output a data URI for the image. This image now forms the background images for my website, which you may notice is generated upon every view. The source is available on GitHub.","selected":false},{"name":"site","type":"portfolio","title":"My Website","subtitle":"Central hub for Resume + Portfolio","link":"","image":"img/site.png","btnText":"","category":"Websites","text":"The website you're currently looking at! This site was built to provide a central location for my portfolio work and resume. In addition it was a chance to learn AngularJS and Bootstrap. The resume and portfolio items are dynamically loaded from JSON files and displayed using AngularJS meaning that updates are as simple as adding an entry to a file. The use of Bootstrap means that the website should display correctly on any device, from cellphones to tablets to desktop computers. The navbar updates to reflect the state of the portfolio JSON and provides an easy means of navigating to a specific section. The contact page makes use of a server-side script to forward contact inquiries to me as an email. Recently I added a button in the Resume section to generate a PDF version, this is done using jsPDF and happens client-side from the displayed CV information, meaning that an up to date version of my CV is always available.","selected":false},{"name":"edit","type":"portfolio","title":"CV/Portfolio Editor","subtitle":"Live Tool for editing site content","link":"http://dooley.ac.nz/edit","image":"img/edit.png","btnText":"Visit","category":"Websites","text":"Editing JSON by hand isn't exactly the most fun exercise, so I created a tool to edit my website, from the website itself. The Resume and Portfolio sections of the site are loaded dynamically from JSON. This tool loads the data and displays it nicely with a combination of AngularJS and Bootstrap. To facilitate this I had to create a NodeJS api that allows me to save the JSON back to the server. To prevent any malicious editing the save button is password protected, and to maintain a semblance of security for this I took a few steps. I included an OpenPGP library on the site and the NodeJS server. The edit site queries the server to receive the Public key (dooley.ac.nz/adminedit/getkey) and encrypts the password using it before sending it along with the data. The server decrypts the password and checks that they match.","selected":false},{"name":"pbe","type":"portfolio","title":"Petroleum Basin Explorer","subtitle":"Geological Feature Viewer","link":"","image":"","btnText":"","category":"Work","text":"The Petroleum Basin Explorer (PBE) is a product of GNS Science, a map based web application with overlays for various geological and geographical features. My involvement with this project was a complete rewrite of the web application to make use of AngularJS and LeafletJS. This work ended up extending past the front end development and moving on to overhaul the backend to move to Spring Data. This version of PBE is expected to be deployed in mid June.","selected":false},{"name":"welldb","type":"portfolio","title":"Wells DB","subtitle":"New Zealand Borehole Database","link":"https://data.gns.cri.nz/boreservice/index.html","image":"img/welldb.png","btnText":"Visit","category":"Work","text":"Wells DB, another product of GNS Science, is a tool to allow geologists to view information gathered by GNS from various boreholes around New Zealand. My part in this was to rewrite the existing web application using AngularJS and do some work migrating the back end to Spring Data.","selected":false}]
